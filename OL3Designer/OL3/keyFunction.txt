function createKey(keyObject){
var changeHandlerEvals = "";
keyLayers = keyObject['keyLayers'];
keyDiv = keyObject['keyDiv'];
keyHeading = keyObject['keyTitle'];
keyPadding = keyObject['keyPadding'];
keyPatchSize = keyObject['keyPatchSize'];

//blank anything in div
document.getElementById(keyDiv).innerHTML = "";

//get info
var numberOfKeyLayers = keyLayers.length;
var theKeyHTML = "<div  style='padding:" + keyPadding + "px;'>" + keyHeading;

//for each layer you need 1. the styles . 2. the values which relate to them
//alert(keyLayers[0].get('title'));
for (i = 0; i < keyLayers.length; i++) { 
var layerName = keyLayers[i].get('name');
var styleSelectorIndex = 0;

//get number of dynamic styles
var numStyles = getNumStyles(layerName + "_Style");
layerStyle = getCurrentLayerStyle(keyLayers[i]);
styleSelectorIndex = getSelectedStyleIndex(layerName);
var numSymbols = countLiterols(layerStyle);
patchPad = "<td>&nbsp &nbsp</td>";
var numControls = 0;


//create header html
var table1row1 = "<table style='width:100%;'><tr><td>";
table1row1 = table1row1 + "<table style='width:100%;'><tr><td style='width:15px;'>  <input  id='" +  layerName + "_switch' type='checkbox' checked='true' onclick='switchLayerVisibility(" + String.fromCharCode(34) + layerName + String.fromCharCode(34) + ")'>";
table1row1 = table1row1 + "</td>";
if (numSymbols == 1){
	table1row1 = table1row1   + "<td style='width:50px;'> <div id='" + layerName + "_Style" + styleSelectorIndex + "_Rule0_header" + "' style='width:50px;height:" + keyPatchSize + "px;'></div> </td>";
	table1row1 = table1row1 + "<td><div id='" + layerName + "_Style" + styleSelectorIndex + "_Rule0_Description_header" + "'>" + getKeyText(keyObject,i,0,0) + "</div></td>";
} else {
	//table1row1 = table1row1 + "<td>" + keyLayers[i].get('title') + "</td>";
	table1row1 = table1row1   + "<td style='width:50px;'> <div id='" + layerName + "_Style" + styleSelectorIndex + "_Rule0_header" + "' style='width:50px;height:" + keyPatchSize + "px;'></div> </td>";
	table1row1 = table1row1 + "<td>" + keyLayers[i].get('title') + "</td>";

}
table1row1 = table1row1 + "</tr></table></tr>";


//create expander html if needed
var table1row2 = "";
if (numSymbols != 1 || numStyles > 1 || numControls > 0){
	table1row2 = table1row2 + "<tr style='width:100%'><td style='width:100%;height:15px;'>"
	table1row2 = table1row2 + "<button id='" + layerName + "_Style" + styleSelectorIndex + "_Button" + "' onClick='CE("  + String.fromCharCode(34) +   layerName + String.fromCharCode(34) + ")' style='width:100%;height:15px;line-height:0.8em;'>-</button>"
	table1row2 = table1row2 + "</td></tr>";
}



//Create style selector if needed
var table2row1 = "";
var table2row1 = "<tr style='width:100%'><td style='width:100%;'><div id='" + layerName + "_Styles' style='width:100%;'>"
if(numStyles > 1 && keyObject['stylePickerInKey'][i] == 1){
	table2row1 = table2row1 + "<select style='width:100%;height:35px;' id='styleSelect" + layerName + "'>";
	for (a = 0; a < numStyles; a++) { 
		table2row1 = table2row1 + '<option value="' + layerName + "_Style" + a + '_Function">' + getStyleText(keyObject,i,a) + '</option>';
	}
	table2row1 = table2row1 + '</select>';
	//*create change handler 
	changeHandlerEvals = changeHandlerEvals + "document.getElementById('styleSelect" + layerName + "').onchange = function(){ eval(" + layerName + "_SwitchLayerDeclaration( document.getElementById('styleSelect" + layerName + "').selectedIndex)); if(mapStyleTypes['" + getMapNumFromLayerName(layerName) + "']['" + getLayerNumFromLayerName(layerName) + "'][document.getElementById('styleSelect" + layerName + "').selectedIndex] != 'Heatmap'){" + layerName + ".setStyle(eval(document.getElementById('styleSelect" + layerName + "').value));refreshKey(" + keyDiv + ")}else{refreshKey(" + keyDiv + ")}  };";
}
var table2row1 = table2row1 + "</div></td></tr>";




//create control html if needed
var table2row2 = "";
table2row2 = table2row2 + "<tr><td><div id='" + layerName + "_Controls' style='width:100%;'>";
//var allLayerControls = document.getElementById(layerName + "_controlHTML");
var allLayerControls = null;
if(eval("typeof " + layerName + "_controlHTML") != 'undefined'){
allLayerControls = eval(layerName + "_controlHTML");
}
	if (allLayerControls != null && keyObject['controlPickerInKey'][i] == 1) {
		table2row2 = table2row2 + allLayerControls;
	}
table2row2 = table2row2 + "</div></td></tr>";




//create key html
var table2row3 = "";
var table2row3 = "<tr><td><div id='" + layerName + "_Keys' style='width:100%;'>";
//if lots of symbolizer
if (numSymbols > 1) {
table2row3 = table2row3 + "<table id='" + layerName + "_keyTable'>";
	//create divs andtds for each symbolizer
	for (j = 0; j < numSymbols; j++) { 
		table2row3 = table2row3 + "<tr><td><div id='" + layerName + "_Style" + styleSelectorIndex + "_Rule" + j + "_PaddingCell'>&nbsp &nbsp</div></td><td><div  id='" + layerName + "_Style" + styleSelectorIndex + "_Rule" + j + "' style='width:50px;height:" + keyPatchSize + "px;'></div></td><td><div id='" + layerName + "_Style" + styleSelectorIndex + "_Rule" + j + "_Description'>" + getKeyText(keyObject,i,0,j) + "</div></td></tr>";
	}
table2row3 = table2row3 + "</table>";
}else{
table2row3 = table2row3 + "<table id='" + layerName + "_keyTable'></table>";
}
var table2row3 = table2row3 + "</div></td></tr>";



//combine
var table1row3 = "";
var combinedKeyHTML = "";
combinedKeyHTML = combinedKeyHTML + table1row1 + table1row2 + "<tr style='width:100%;><td style='width:100%;><table id='keyTableAndControls_" + layerName + "' style='width:100%;'>" + table2row1 + table2row2 + table2row3 + "</table></td></tr></table>";
theKeyHTML = theKeyHTML  + combinedKeyHTML;


} //end for 

theKeyHTML = theKeyHTML + "</div>";


//place key html into correct div
document.getElementById(keyDiv).innerHTML = theKeyHTML;

//run evals for change handlers now html has been created
eval(changeHandlerEvals);

//now cycle back through styles and create ol3 maps, must be done after html is in place
for (s = 0; s < keyLayers.length; s++) { 
var layerName = keyLayers[s].get('name');
layerStyle = getCurrentLayerStyle(keyLayers[s])
styleSelectorIndex = getSelectedStyleIndex(layerName)

if (countLiterols(layerStyle) == 1) {
	//if (mapStyleTypes[getMapNumFromLayerName(layerName)][getLayerNumFromLayerName(layerName)][layerStyle] != 'Heatmap'){
		createKeyMap(layerName + "_Style" + styleSelectorIndex + "_Rule0_header",keyLayers[s].get('geoType'),layerStyle['0']) 
	//}
	} else{
		//if (mapStyleTypes[getMapNumFromLayerName(layerName)][getLayerNumFromLayerName(layerName)][layerStyle] != 'Heatmap'){
		for (d = 0; d < countLiterols(layerStyle); d++) { 
			createKeyMap(layerName + "_Style" + styleSelectorIndex + "_Rule" + d, keyLayers[s].get('geoType'),layerStyle[d]) 
		//}
		}
	}
}

//end key function
}

//************************************************************************************
//*******************************************KEY REFRESH******************************
//************************************************************************************
function refreshKey(keyDivName){
//get key literol from keydivname
var theKeylitoral = eval(keyDivName)
keyLayers = theKeylitoral['keyLayers'];
var patchPad = "";

//same as what was/is on end of create key function
for (s = 0; s < keyLayers.length; s++) { 
var layerName = keyLayers[s].get('name');
layerStyle = getCurrentLayerStyle(keyLayers[s])
styleSelectorIndex = getSelectedStyleIndex(layerName)

//wipe header key if present
if (document.getElementById( layerName + "_Style0_Rule0_header") != null){
document.getElementById( layerName + "_Style0_Rule0_header").innerHTML = "";
}

//original keymaps will have been created in style0
if (countLiterols(layerStyle) == 1) {
	//clear out old key
	//eval("document.getElementById('" + layerName + "_Style0_Rule0').innerHTML = '';");
	//delete old key
	document.getElementById(layerName + "_keyTable").innerHTML = "";

	//add div to keytable
	var checkbox = "";
	styleSelectorTypeLayer = document.getElementById("styleSelect" + layerName);
	patchPad = "<td>&nbsp &nbsp</td>";
	if (styleSelectorTypeLayer == null) {
		checkbox = "<input  id='" +  layerName + "_switch' type='checkbox' checked='true' onclick='switchLayerVisibility(" + String.fromCharCode(34) + layerName + String.fromCharCode(34) + ")'>"
		patchPad = "";
	} else {patchPad = "&nbsp &nbsp";}
	//document.getElementById(layerName + "_keyTable").innerHTML = "<tr><td>" + checkbox  + "</td><td>" + patchPad + "</td><td><div  id='" + layerName + "_Style" + styleSelectorIndex + "_Rule0_header' style='width:50px;height:" + keyPatchSize + "px;'></div></td><td><div id='" + layerName + "_Style" + styleSelectorIndex + "_Rule0_Description_header" + "'>" + getKeyText(theKeylitoral,s,styleSelectorIndex,0) + "</div></tr></tr>";
	//create key symbol
	//style index number will allways be "0" for the header row ... was previously + styleSelectorIndex +
	createKeyMap(layerName + "_Style" + "0" + "_Rule0_header",keyLayers[s].get('geoType'),layerStyle[0]) 
} else{

//re create divs as there may be a different amount
theKeyHTML = "";

	//create divs/tds for each symbolizer
	for (j = 0; j < countLiterols(layerStyle); j++) { 
		theKeyHTML = theKeyHTML + "<tr><td><div id='" + layerName + "_Style" + styleSelectorIndex + "_Rule" + j + "_PaddingCell'>&nbsp &nbsp</div></td><td><div  id='" + layerName + "_Style" + styleSelectorIndex + "_Rule" + j + "' style='width:50px;height:" + keyPatchSize + "px;'></div></td><td><div id='" + layerName + "_Style" + styleSelectorIndex + "_Rule" + j + "_Description'>" + getKeyText(theKeylitoral,s,styleSelectorIndex,j) + "</div></td></tr>";
	}
	//replace with new divs for new style/s
	document.getElementById(layerName + "_keyTable").innerHTML = theKeyHTML;
	//always expand key before refreshing key maps
	if(document.getElementById(layerName + "_Styles").style.display == 'none'){
		CE(layerName);
	}
	
	
	for (d = 0; d < countLiterols(layerStyle); d++) { 
		//clear out old key - need to do for all divs that previous style had. but what happen when style is changed to one with more divs....they will not exist
		//eval("document.getElementById('" + layerName + "_Style" + styleSelectorIndex + "_Rule" + d + "').innerHTML = '';");
		
		createKeyMap(layerName + "_Style" + styleSelectorIndex + "_Rule" + d, keyLayers[s].get('geoType'),layerStyle[d]) 
	}
}
}
}
//************************************************************************************

function getKeyText(keyLiterol,layerNum,styleNum,ruleNum){
return keyLiterol['keyDescriptions'][layerNum][styleNum][ruleNum];
}

function getStyleText(keyLiterol,layerNum,styleNum,ruleNum){
return keyLiterol['styleDescriptions'][layerNum][styleNum];
}

function countLiterols(theObj){
if(theObj == 'Heatmap'){
	return 1
}

theCount = 0;
for (var key in theObj) {
   if (theObj.hasOwnProperty(key)) {
            theCount = theCount + 1;
   }
}
return theCount
}

function getCurrentLayerStyle(theLayer){
//**************get current layer style ********************
layerName = theLayer.get('name');
//get element by id of style picker combo box
styleSelector = document.getElementById("styleSelect" + layerName);
//if fetched element is null, then only one style present (simply fetch style0 array)
// assemeble eval of map1_vectorLayer_1_StyleX(from layer name property) to get the style array -> cycle through each item in array and create ol map
styleSelectorIndex = getSelectedStyleIndex(layerName);

var layerNum = getLayerNumFromLayerName(layerName);
var mapNum = getMapNumFromLayerName(layerName);
var StyleNum = styleSelectorIndex;
if(mapStyleTypes[mapNum][layerNum][StyleNum] == 'Heatmap'){
	return "Heatmap"
}

layerStyle = eval(layerName + "_Style" + styleSelectorIndex + "('key')");
//*********************************************************

return layerStyle
}

function getSelectedStyleIndex(theLayerName){
styleSelector = document.getElementById("styleSelect" + theLayerName);
	if (styleSelector != null) {
		styleSelectorIndex = styleSelector.selectedIndex;
	} else { // no multiple style, only one style present for layer
		styleSelectorIndex = 0;
	}
return 	styleSelectorIndex
}

function switchLayerVisibility(theLayer){
//get the layer object
layerToSwitch = eval(theLayer);
switchCheckbox = eval("document.getElementById(" + String.fromCharCode(34) + theLayer + "_switch" + String.fromCharCode(34) + ")");
if(switchCheckbox.checked == true){
	layerToSwitch.setVisible(true);
} else {
	layerToSwitch.setVisible(false);
}
}

function getNumStyles(layerNameAndStyle){
var theStyleCount = 0;
var tempStyle = eval(layerNameAndStyle + theStyleCount);

while (tempStyle != false){
	theStyleCount = theStyleCount + 1;
	tempStyle = eval("if (typeof " + layerNameAndStyle + theStyleCount + " != 'undefined'){true}else{false}" );
}

return theStyleCount;
}



function createKeyMap(divID,geoType,layerSymbolizer){
//creates a ol3 map in the given div id
var mapEvalExp;
var layerEvalExp;
var sourceEvalExp;
var evaledLayer;

var layerName = divID.split('_Style')[0];
var layerNum = getLayerNumFromLayerName(layerName);
var mapNum = getMapNumFromLayerName(layerName);
var StyleNum = divID.split('_Style')[1];
StyleNum  = StyleNum.split('_Rule')[0];

//select correct gemoetry
var theGeometry;
switch(geoType) {
    case 'Polygon':
		theGeometry = "{'type': 'Polygon','coordinates': [[[0, 0], [0, 10], [4, 7], [10, 10], [10, 0]]]  }";
		break;
	case 'Point':
		theGeometry = " {'type': 'Point','coordinates': [0, 0]}";
		break;
	case 'Line':
		theGeometry = "{'type': 'LineString','coordinates': [[0, 0], [10, 0]]}";
		break;
}	

sourceEvalExp = divID + "_source = new ol.source.Vector({   features: (new ol.format.GeoJSON()).readFeatures(  {'type':'FeatureCollection', 'crs': { 'type': 'name','properties': {'name': 'USER:1999'}},'features':[{'type': 'Feature','geometry': " + theGeometry + ",'properties': {'key_weight':'1'}  }]})  });"; //OL3.8


if(mapStyleTypes[mapNum][layerNum][StyleNum] == 'Heatmap'){
	layerEvalExp = divID + "_layer = new ol.layer.Heatmap({title:'key_" + divID + "',source: " + divID + "_source,weight:'key_weight',blur:" + mapHeatmapParameters[mapNum][layerNum][StyleNum][0] + ",radius:" + mapHeatmapParameters[mapNum][layerNum][StyleNum][1] + ",gradient:[" + mapHeatmapParameters[mapNum][layerNum][StyleNum][2] + "]});";
}else{
	layerEvalExp = divID + "_layer = new ol.layer.Vector({title:'key_" + divID + "',source: " + divID + "_source});";
}

mapEvalExp = "var key_" + divID + "= new ol.Map({layers: [" + divID + "_layer], interactions:[], target: document.getElementById('" + divID + "'), controls:[], view: new ol.View({center: [0, 0],zoom: 3,  projection: 'USER:1999'})});setMaxExtent(key_" + divID + ")";


eval(sourceEvalExp);
eval(layerEvalExp);
evaledLayer = eval(divID + "_layer");
if(mapStyleTypes[mapNum][layerNum][StyleNum] != 'Heatmap'){
	evaledLayer.setStyle(layerSymbolizer);
}

eval(mapEvalExp);
}

function CE(layerName){
var layerTableID = "keyTableAndControls_" + layerName ;
var layerTable = document.getElementById(layerTableID);
var layerStyles = document.getElementById(layerName + "_Styles");
var layerControls = document.getElementById(layerName + "_Controls");
var layerKeys = document.getElementById(layerName + "_Keys");

if(layerStyles.style.display == 'none'){
	layerStyles.style.display = 'block';
	layerControls.style.display = 'block';
	layerKeys.style.display = 'block';
	document.getElementById(layerName + "_Style0_Button").innerHTML = '-';
}else{
	layerStyles.style.display = 'none';
	layerControls.style.display = 'none';
	layerKeys.style.display = 'none';
	document.getElementById(layerName + "_Style0_Button").innerHTML = '+';
}
}

//**************************Cluster Statistic Function********************
function returnClusterStatistics(clusteredFeature,field,statisticType){
//get all features in cluster
var allFeatures = clusteredFeature.get('features');
if (typeof allFeatures == 'undefined'){
return 0
}

var numFeatures = allFeatures.length;

//cycle though features getting the statistic column
if (statisticType != 'Count'){
var currentStatValue = Number(allFeatures[0].get(field));
for (o = 0; o < numFeatures; o++) { 
	if(statisticType == "Min"){currentStatValue = Math.min(Number(currentStatValue,allFeatures[o].get(field)))}
	if(statisticType == "Max"){currentStatValue = Math.max(Number(currentStatValue,allFeatures[o].get(field)))}
	if((statisticType == "Mean" || statisticType == "Sum") && o > 0){currentStatValue = currentStatValue + Number(allFeatures[o].get(field))}
}
}
if(statisticType == "Count"){currentStatValue = allFeatures.length}

if(statisticType == "Mean"){currentStatValue = currentStatValue/numFeatures}	
return currentStatValue
}

function getLayerNumFromLayerName (layerName) {
var theArr;
theArr = layerName.split("vectorLayer_")
return theArr[1];
}

function getMapNumFromLayerName (layerName) {
var theArr;
theArr = layerName.split("_vectorLayer_")
return theArr[0].substring(3);
}




//**************************Cluster popups Function********************
function returnClusterPP(clusteredFeature,layerName){
//get all features in cluster
var allFeatures = clusteredFeature.get('features');
if (typeof allFeatures == 'undefined'){
return ""
}

var numFeatures = allFeatures.length;
var allPopupHTML = "<div style='height:200px;overflow:auto;'>"

//if 1 feature just show it
if (numFeatures == 1){
	return allPopupHTML + eval(layerName + "_popupHTML(allFeatures[0])") + "</div>";
}

//cycle though features getting the pp div
var bgCol;
for (o = 0; o < numFeatures; o++) { 
	//

	allPopupHTML = allPopupHTML + "<table style='width:100%;'><tr><td>";
	allPopupHTML = allPopupHTML + "<table><tr ><td ><button id='popupButtonID" + o + "' style='width:30px;height:25px;' onclick='expandClusteredPopup(" + o + ")'> + </button></td><td>Feature " + o + "</td></tr></table>";
	allPopupHTML = allPopupHTML + "</td></tr><tr><td><div id='popupDivHTML" + o + "' style='display:none;'>";
	allPopupHTML = allPopupHTML + eval(layerName + "_popupHTML(allFeatures[" + o + "])") + "";
	allPopupHTML = allPopupHTML + "</div></td></tr></table>";
	//allPopupHTML = allPopupHTML + "</td></tr></table>";
}

allPopupHTML = allPopupHTML + "</div>"
return allPopupHTML
}



function expandClusteredPopup(ref){
//get element
var popupDiv = document.getElementById("popupDivHTML" + ref);
	if (popupDiv.style.display == "none"){
		popupDiv.style.display = "block"
		document.getElementById("popupButtonID" + ref).innerHTML = "-";
	}else{ 
		popupDiv.style.display = "none"
		document.getElementById("popupButtonID" + ref).innerHTML = "+";
	}
}


function abs2rel(theAbs, newPath){
//remove everything before first "/"
if (theAbs.indexOf(":") != -1){
	theAbs = theAbs.substring(theAbs.indexOf("/"))
}

if (newPath.indexOf(":") != -1){
	newPath = newPath.substring(newPath.indexOf("/"))
}

 
var uri = new URI(theAbs);
var theRel = uri.relativeTo(newPath);
return theRel;

}

function getCorrectPath(feature,field,type){
var thePath;
if(type == 'abs'){ 
	return feature.get(field);
}
if(type == 'rel'){
	return abs2rel(feature.get(field), mapOutputPath)
}

}
